CZĘŚĆ 1: Projektowanie
Stwórz klasę Item, która zawiera String name oraz int weight, które reprezentują przedmiot do przeniesienia przez rakiety.

Stwórz interfejs SpaceShip, który zawiera definicje metod:

launch: metoda, która zwraca true lub false, w zależności od tego, czy start zakończył się sukcesem, czy też rakieta uległa awarii.
land: metoda, która również zwraca true lub false w zależności od powodzenia lądowania.
canCarry: metoda, która przyjmuje obiekt Item jako argument i zwraca true, jeśli rakieta może przenieść taki przedmiot lub false, jeśli przekroczy to limit wagowy.
carry: metoda, która również przyjmuje obiekt Item i aktualizuje bieżącą wagę rakiety.
Stwórz klasę Rocket, która implementuje interfejs SpaceShip i w ten sposób implementuje wszystkie powyższe metody.

Metody launch i land w klasie Rocket powinny zawsze zwracać true. Kiedy klasy U1 i U2 rozszerzą klasę Rocket, zastąpią one te metody, aby zwracać true lub false w zależności od rzeczywistego prawdopodobieństwa każdego typu.
Metody carry i canCarry powinny zostać zaimplementowane tutaj i nie będą musiały być nadpisywane w klasach U1 i U2.
Stwórz klasy U1 i U2, które rozszerzają klasę Rocket i nadpisują metody land i launch w celu obliczenia odpowiadającej szansy na eksplozję i zwracania true lub false na podstawie losowej liczby za pomocą równania prawdopodobieństwa dla każdego typu.

CZĘŚĆ 2: Symulacja
Stwórz klasę Simulation, która jest odpowiedzialna za odczyt danych dotyczących przedmiotów i uzupełnienie rakiet. Klasa Simulation powinna zawierać następujące metody:
/////////////////////////////////////////////////////////


loadItems: ta metoda wczytuje wszystkie przedmioty z pliku tekstowego i zwraca ArrayListę przedmiotów. Każda linia w pliku tekstowym składa się z nazwy przedmiotu,
po której następuje znak równości i jego waga w kilogramach. Na przykład:
habitat=100000
colony=50000
food=50000
Metoda loadItems powinna czytać plik tekstowy linia po linii, tworzyć obiekt przedmiotu dla każdej linii, a następnie dodawać go do ArrayListy przedmiotów.
Metoda powinna zwrócić tę ArrayListę.

loadU1: ta metoda przyjmuje ArrayListę przedmiotów zwróconą z metody loadItems i zaczyna tworzyć rakiety U1.
Najpierw próbuje wypełnić jedną rakietę jak największą ilością przedmiotów przed utworzeniem nowego obiektu rakiety i wypełnieniem kolejnego, dopóki wszystkie przedmioty nie zostaną załadowane.
Metoda zwraca ArrayListę tych rakiet U1, które są w pełni załadowane.

loadU2: ta metoda również przyjmuje ArrayListę przedmiotów i zaczyna tworzyć rakiety U2, wypełniając je tymi samymi przedmiotami, co w przypadku rakiet U1,
dopóki wszystkie przedmioty nie zostaną załadowane.
Metoda zwraca ArrayListę tych rakiet U2, które są w pełni załadowane.

runSimulation: ta metoda przyjmuje ArrayListę rakiet i wywołuje metody launch i land dla każdej z rakiet w ArrayList.
Za każdym razem, gdy rakieta eksploduje lub rozbiła się (tj. gdy launch lub land zwróci false), musi wysłać tę rakietę ponownie.
W międzyczasie śledzi całkowity budżet wymagany do bezpiecznego wysłania każdej rakiety na Marsa.
Metoda runSimulation zwraca całkowity budżet wymagany do wysłania wszystkich rakiet (w tym tych, które uległy awarii).


Rocket Specifications
U-1
Rocket cost = $100 Million
Rocket weight = 10 Tonnes
Max weight (with cargo) = 18 Tonnes
Chance of launch explosion = 5% * (cargo carried / cargo limit)
Chance of landing crash = 1% * (cargo carried / cargo limit)
U-2
Rocket cost = $120 Million
Rocket weight = 18 Tonnes
Max weight (with cargo) = 29 Tonnes
Chance of launch explosion = 4% * (cargo carried / cargo limit)
Chance of landing crash = 8% * (cargo carried / cargo limit)
Here's what you need to do:

PART 1: The design
Create an Item class that includes a String name and an int weight that will represent an item to be carried by the rockets

Create a SpaceShip Interface that includes the definitions of these methods:

launch: a method that returns either true or false indicating if the launch was successful or if the rocket has crashed.
land: a method that also returns either true or false based on the success of the landing.
canCarry: a method that takes an Item as an argument and returns true if the rocket can carry such item or false if it will exceed the weight limit.
carry: a method that also takes an Item object and updates the current weight of the rocket.
Create a class Rocket that implements the SpaceShip Interface and hence implements all the methods above.

launch and land methods in the Rocket class should always return true. When U1 and U2 classes extend the Rocket class they will override these methods to return true or false based on the actual probability of each type.
carry and canCarry should be implemented here and will not need to be overridden in the U1 and U2 classes
Create classes U1 and U2 that extend the Rocket class and override the land and launch methods to calculate the corresponding chance of exploding and return either true or false based on a random number using the probability equation for each.

PART 2: The simulation
Create a Simulation class that is responsible for reading item data and filling up the rockets. The Simulation class should include these methods:

loadItems: this method loads all items from a text file and returns an ArrayList of Items:
Each line in the text file consists of the item name followed by = then its weigh in kg. For example:
habitat=100000
colony=50000
food=50000
loadItems should read the text file line by line and create an Item object for each and then add it to an ArrayList of Items. The method should then return that ArrayList.
loadU1: this method takes the ArrayList of Items returned from loadItems and starts creating U1 rockets. It first tries to fill up 1 rocket with as many items as possible before creating a new rocket object and filling that one until all items are loaded. The method then returns the ArrayList of those U1 rockets that are fully loaded.
loadU2: this method also takes the ArrayList of Items and starts creating U2 rockets and filling them with those items the same way as with U1 until all items are loaded. The method then returns the ArrayList of those U2 rockets that are fully loaded.
runSimulation: this method takes an ArrayList of Rockets and calls launch and land methods for each of the rockets in the ArrayList. Every time a rocket explodes or crashes (i.e if launch or land return false) it will have to send that rocket again. All while keeping track of the total budget required to send each rocket safely to Mars. runSimulation then returns the total budget required to send all rockets (including the crashed ones).
PART 3: Running the Simulation
Create a Main class with the main method and start running the simulation:

Create a Simulation object
Load Items for Phase-1 and Phase-2
Load a fleet of U1 rockets for Phase-1 and then for Phase-2
Run the simulation using the fleet of U1 rockets and display the total budget required.
Repeat the same for U2 rockets and display the total budget for that